% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_hyper_init.R
\name{set_init}
\alias{set_init}
\title{Gather initial variational parameters provided by the user.}
\usage{
set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb, tau_vb, link = "identity",
  ind_bin = NULL, q = NULL, mu_alpha_vb = NULL, sig2_alpha_vb = NULL,
  r = NULL, mu_c0_vb = NULL, mu_c_vb = NULL)
}
\arguments{
\item{d}{Number of responses.}

\item{p}{Number of candidate predictors.}

\item{gam_vb}{Matrix of size p x d with initial values for the variational
parameter yielding posterior probabilities of inclusion.}

\item{mu_beta_vb}{Matrix of size p x d with initial values for the
variational parameter yielding regression coefficient estimates for
predictor-response pairs included in the model.}

\item{sig2_beta_vb}{Vector of length d, for \code{link = "identity"} and
for \code{link = "mix"}, of length 1 for \code{link = "probit"}, and a
matrix of size p x d, for \code{link = "logit"}, with initial values for
the variational parameter yielding estimates of effect variances for
predictor-response pairs included in the model. For
\code{link = "identity"} and \code{link = "mix"}, these values are the same
for all the predictors (as a result of the predictor variables being
standardized before the variational algorithm). For \code{link = "probit"},
they are the same for all the predictors and responses.}

\item{tau_vb}{Vector of length d, for \code{link = "identity"}, and of
length d_cont = d - length(ind_bin) (number of continuous responses), for
\code{link = "mix"}, with initial values for the variational parameter
yielding estimates for the continuous response residual precisions. Must be
\code{NULL} for \code{link = "logit"} and \code{link = "probit"}.}

\item{link}{Response link. Must be "\code{identity}" for linear regression,
"\code{logit}" for logistic regression, "\code{probit}" for probit
regression, or "\code{mix}" for a mix of identity and probit link functions
(in this case, the indices of the binary responses must be gathered in
argument \code{ind_bin}, see below).}

\item{ind_bin}{If \code{link = "mix"}, vector of indices corresponding to the
binary variables in \code{Y}. Must be \code{NULL} if \code{link != "mix"}.}

\item{q}{Number of covariates. Default is \code{NULL}, for \code{Z}
\code{NULL}.}

\item{mu_alpha_vb}{Matrix of size q x d with initial values for the
variational parameter yielding regression coefficient estimates for
covariate-response pairs. Default is \code{NULL}, for \code{Z} \code{NULL}.}

\item{sig2_alpha_vb}{Matrix of size q x d for \code{link = "identity"},
for \code{link = "logit"} and for \code{link = "mix"} with initial values
for the variational parameter yielding estimates of effect variances for
covariate-response pairs. Vector of length q for \code{link = "probit"}.
Default is \code{NULL}, for \code{Z} \code{NULL}.}

\item{r}{Number of variables representing external information on the
candidate predictors. Default is \code{NULL}, for \code{V} \code{NULL}.}

\item{mu_c0_vb}{Vector of length p with initial values for the variational
parameter linked to the proportion of responses associated with each
candidate predictor. Default is \code{NULL}, for \code{V} \code{NULL}.}

\item{mu_c_vb}{Matrix of size r x d with initial values for the variational
parameter yielding regression coefficient estimates for the influence of
external information on the candidate predictors on their selection.
Default is \code{NULL}, for \code{V} \code{NULL}.}
}
\value{
An object of class "\code{init}" preparing user initial values for
  the variational parameters in a form that can be passed to the
  \code{\link{locus}} function.
}
\description{
This function must be used to provide initial values for the variational
parameters used in \code{\link{locus}}.
}
\details{
The \code{\link{locus}} function can also be used with default initial
parameter choices (without using \code{\link{set_init}}) by setting
its argument \code{list_init} to \code{NULL}.
}
\examples{
user_seed <- 123; set.seed(user_seed)
n <- 200; p <- 250; p0 <- 50; d <- 25; d0 <- 15
list_X <- generate_snps(n = n, p = p)
list_Y <- generate_phenos(n = n, d = d, var_err = 1)

# Continuous outcomes
#
dat_g <- generate_dependence(list_snps = list_X, list_phenos = list_Y,
                             ind_d0 = sample(1:d, d0),
                             ind_p0 = sample(1:p, p0),
                             vec_prob_sh = 0.1, family = "gaussian",
                             max_tot_pve = 0.9)

# gam_vb chosen so that the prior mean number of responses associated with
# each candidate predictor is 1/4.
gam_vb <- matrix(rbeta(p * d, shape1 = 1, shape2 = 4*d-1), nrow = p)
mu_beta_vb <- matrix(rnorm(p * d), nrow = p)
tau_vb <- 1 / apply(dat_g$phenos, 2, var)
sig2_beta_vb <- 1 / rgamma(d, shape = 2, rate = 1 / tau_vb)

list_init_g <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb, tau_vb,
                        link = "identity")

vb_g <- locus(Y = dat_g$phenos, X = dat_g$snps, p0_av = p0,
              link = "identity", list_init = list_init_g)

# Continuous outcomes with covariates
#
q <- 4
Z <- matrix(rnorm(n * q), nrow = n)

mu_alpha_vb <- matrix(rnorm(q * d), nrow = q)
sig2_alpha_vb <- 1 / matrix(rgamma(q * d, shape = 2, rate = 1), nrow = q)

list_init_g_z <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb, tau_vb,
                          link = "identity", q = q,
                          mu_alpha_vb = mu_alpha_vb,
                          sig2_alpha_vb = sig2_alpha_vb)

# we take p0_av = p0 (known here); this choice may result in variable
# selections that are (too) conservative in some cases. In practice, often
# p0_av as a slightly overestimated guess of p0.
vb_g_z <- locus(Y = dat_g$phenos, X = dat_g$snps, p0_av = p0, Z = Z,
                link = "identity", list_init = list_init_g_z)

# Continuous outcomes with external annotation
#
r <- 4
V <- matrix(rnorm(p * r), nrow = p)
bool_p0 <- rowSums(dat_g$pat) > 0
V[bool_p0, ] <- rnorm(sum(bool_p0) * r, mean = 2) # informative annotations

mu_c0_vb <- rnorm(p, mean = -1)
mu_c_vb <- matrix(rnorm(r * d, mean = 0, sd = 0.01), nrow = r)

list_init_g_v <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb, tau_vb,
                          link = "identity", r = r, mu_c0_vb = mu_c0_vb,
                          mu_c_vb = mu_c_vb)

vb_g_v <- locus(Y = dat_g$phenos, X = dat_g$snps, p0_av = p0,  V = V,
                link = "identity", list_init = list_init_g_v)

# Binary outcomes
#
dat_b <- generate_dependence(list_snps = list_X, list_phenos = list_Y,
                             ind_d0 = sample(1:d, d0),
                             ind_p0 = sample(1:p, p0),
                             vec_prob_sh = 0.1, family = "binomial",
                             max_tot_pve = 0.9)

# gam_vb chosen so that the prior mean number of responses associated with
# each candidate predictor is 1/4.
sig2_beta_vb_logit <- 1 / t(replicate(p, rgamma(d, shape = 2, rate = 1)))

list_init_logit <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb_logit,
                            tau_vb = NULL, link = "logit")

vb_logit <- locus(Y = dat_b$phenos, X = dat_b$snps, p0_av = p0,
                  link = "logit", list_init = list_init_logit)


sig2_beta_vb_probit <- sig2_beta_vb[1]
list_init_probit <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb_probit,
                             tau_vb = NULL, link = "probit")

vb_probit <- locus(Y = dat_b$phenos, X = dat_b$snps, p0_av = p0,
                   link = "probit", list_init = list_init_probit)

# Binary outcomes with covariates
#
list_init_logit_z <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb_logit,
                              tau_vb = NULL, link = "logit",
                              q = q, mu_alpha_vb = mu_alpha_vb,
                              sig2_alpha_vb = sig2_alpha_vb)

vb_logit_z <- locus(Y = dat_b$phenos, X = dat_b$snps, p0_av = p0, Z = Z,
                   link = "logit", list_init = list_init_logit_z)

sig2_alpha_vb_probit <- sig2_alpha_vb[, 1]
list_init_probit_z <- set_init(d, p, gam_vb, mu_beta_vb, sig2_beta_vb_probit,
                               tau_vb = NULL, link = "probit",
                               q = q, mu_alpha_vb = mu_alpha_vb,
                               sig2_alpha_vb = sig2_alpha_vb_probit)

vb_probit_z <- locus(Y = dat_b$phenos, X = dat_b$snps, p0_av = p0, Z = Z,
                     link = "probit", list_init = list_init_probit_z)

# Mix of continuous and binary outcomes
#
Y_mix <- cbind(dat_g$phenos, dat_b$phenos)
ind_bin <- (d+1):(2*d)
p0_mix <- sum(rowSums(cbind(dat_g$pat, dat_b$pat)) > 0)


# gam_vb chosen so that the prior mean number of responses associated with
# each candidate predictor is 1/4.
gam_vb_mix <- matrix(rbeta(p * 2*d, shape1 = 1, shape2 = 8*d-1), nrow = p)
mu_beta_vb_mix <- matrix(rnorm(p * 2*d), nrow = p)
sig2_beta_vb_mix <- 1 / c(rgamma(d, shape = 2, rate = 1 / tau_vb),
                          rgamma(d, shape = 2, rate = 1))


list_init_mix <- set_init(2*d, p, gam_vb_mix, mu_beta_vb_mix,
                          sig2_beta_vb_mix, tau_vb, link = "mix",
                          ind_bin = ind_bin)

vb_mix <- locus(Y = Y_mix, X = dat_b$snps, p0_av = p0_mix, link = "mix",
                ind_bin = ind_bin, list_init = list_init_mix)

mu_alpha_vb_mix <- matrix(rnorm(q * 2*d), nrow = q)
sig2_alpha_vb_mix <- 1 / matrix(rgamma(q * 2*d, shape = 2, rate = 1), nrow = q)

list_init_mix_z <- set_init(2*d, p, gam_vb_mix, mu_beta_vb_mix,
                            sig2_beta_vb_mix, tau_vb, link = "mix",
                            ind_bin = ind_bin, q = q,
                            mu_alpha_vb = mu_alpha_vb_mix,
                            sig2_alpha_vb = sig2_alpha_vb_mix)

vb_mix_z <- locus(Y = Y_mix, X = dat_b$snps, p0_av = p0_mix, Z = Z,
                  link = "mix", ind_bin = ind_bin,
                  list_init = list_init_mix_z)

}
\seealso{
\code{\link{set_hyper}}, \code{\link{locus}}
}
